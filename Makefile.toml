
[env]
PROJECT_NAME = "cheso"
REPO_NAME = "cheso"
GIT_USER = "thrombe"
GIT_PAGES_BRANCH = "web"



[tasks.web-prep]
dependencies = [ "web-build" ]
script_runner = "@shell"
script = '''
mkdir -p web/assets

if [[ ! -d web ]]; then
    cd web
    git clone https://github.com/${GIT_USER}/${REPO_NAME}
    git checkout ${GIT_PAGES_BRANCH}
    cd ..
else
    cd web
    if [[ "$(git rev-parse --abbrev-ref HEAD)" != "${GIT_PAGES_BRANCH}" ]]; then
        exit 51
    fi
    cd ..
fi

cp web_src/index.html web/.
cp web_src/index.js web/.
cp target/pkg/${PROJECT_NAME}_bg.wasm web/runner.wasm
cp target/pkg/${PROJECT_NAME}.js web/runner.js
mkdir -p assets
rsync -av --progress "./assets/" ./web/assets/. --delete
'''


[tasks.web-push]
env = { MODE = "--release" }
run_task = [{ name = ["web-prep", "example", "web-opt", "push"] } ]

[tasks.push]
script_runner = "@shell"
script = '''
cd web
if [[ "$(git rev-parse --abbrev-ref HEAD)" != "${GIT_PAGES_BRANCH}" ]]; then
    exit 52
fi
git add -A

# git commit --amend --no-edit
# git push --force

git commit -m "update wasm"
git push
'''


[tasks.web-build]
script_runner = "@shell"
script = '''
wasm-pack build --target web --out-dir target/pkg --mode no-install --no-typescript ${MODE} ${@}
'''


[tasks.run]
script_runner = "@shell"
script = '''
cargo run --release ${@}
'''


[tasks.web-run]
env = { MODE = "--profiling" }
run_task = [ { name = [ "web-prep", "example", "server-run" ] } ]


[tasks.web-run-release]
env = { MODE = "--release" }
run_task = [ { name = [ "web-prep", "example", "web-opt", "server-run" ] } ]


[tasks.server-run]
script_runner = "@shell"
script = '''
cd server
cargo run --release -- ../web
'''

[tasks.web-opt]
script_runner = "@shell"
script = '''
dir="web/runner.wasm"
opt="$(fd -t f wasm-opt ~/.cache/.wasm-pack | head -n 1)"
if [[ $opt == *"/wasm-opt" ]]; then
    echo "Optimizing wasm binary with wasm-opt ..."
    # echo "${opt} -O ${dir} -o ${dir}.tmp"
    $opt -O $dir -o "${dir}.tmp"
    cp "${dir}.tmp" $dir
fi

'''

[tasks.example]
script_runner = "@shell"
script = '''
found="no"
needed_item="idk"
for item in ${@}
do
    echo $item
    if [[ $found == "yes" ]]; then
        needed_item=$item
        break
    elif [[ $item == "--example" ]]; then
        found="yes"
    fi
done

if [[ $needed_item == "idk" ]]; then
    if [[ $found == "yes" ]]; then
        exit 1
    else
        exit 0
    fi
fi

if [[ $MODE == "--release" ]] || [[ $MODE == "--profiling" ]]; then
    dir="target/wasm32-unknown-unknown/release/examples/${needed_item}.wasm"
else
    dir="target/wasm32-unknown-unknown/debug/examples/${needed_item}.wasm"
fi

cp $dir web/runner.wasm
wasm-bindgen --out-dir web --out-name runner.js --target web web/runner.wasm
'''

# [tasks.example1]
# args = ["${@}"]
# script_runner = "python"
# script_extension = "py"
# script = '''
# import sys
# import os
# args = sys.argv
# if len(args) == 1: exit(0)
# args = args[1:]
# if "--example" in args:
#     args.append(None)
#     example = args[args.index("--example") + 1]
#     if example is None:
#         exit(1)
#     os.environ["MAKE_EXAMPLE"] = example
#     print(os.environ["MAKE_EXAMPLE"])
# '''
